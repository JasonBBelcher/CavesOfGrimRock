import { Location } from "../../Entities/Location";

export const randomMapNodeGenerator = {
    /**
     * Partial application allowing you to select predictably what direction the first map node will take.
     * Second param will favor a general direction ["Northeast", "Northwest", "Southeast", "Southwest"]
     * 
     * @param  {string} first
     * @param  {string} direction
     */
    createNodes(first, direction) {
        let recurse;
        /**
         * How many random nodes for this branch do you want?
         * @param  {number} len
         */
        return recurse = (len) => {

            /**
             * Select the first map nodes direction so node paths can be connected later
             */
            if (len == 0) {
                return;
            }
            /**
             * @param  {string} first==='North | East | South | West'
             */
            if (first === 'North') {
                first = null;
                return new Location(this.autoGeneratedIds, `test_${this.autoGeneratedIds}`, 'auto_generated_node', null, null, null, recurse(len - 1));
            }
            if (first === 'East') {
                first = null;
                return new Location(this.autoGeneratedIds, `test_${this.autoGeneratedIds}`, 'auto_generated_node', null, null, null, null, recurse(len - 1));
            }
            if (first === 'South') {
                first = null;
                return new Location(this.autoGeneratedIds, `test_${this.autoGeneratedIds}`, 'auto_generated_node', null, null, null, null, null, recurse(len - 1));
            }
            if (first === 'West') {
                first = null;
                return new Location(this.autoGeneratedIds, `test_${this.autoGeneratedIds}`, 'auto_generated_node', null, null, null, null, null, null, recurse(len - 1));
            }
            /**
             * Roll for each recursive frame added to the stack
             */
            let roll = Math.floor(calculateRandomNumber(1, 20));

            /** 
             * Random generate nodes.
             */
            /**
             * @param  {string} direction==='Northeast'
             */
            if (direction === 'Northeast') {

                /** North */
                if (roll <= 20 && roll >= 10) {
                    return new Location(this.autoGeneratedIds, `test_${this.autoGeneratedIds}`, 'auto_generated_node', null, null, null, recurse(len - 1));
                }
                /** East */
                if (roll <= 9) {
                    return new Location(this.autoGeneratedIds, `test_${this.autoGeneratedIds}`, 'auto_generated_node', null, null, null, null, recurse(len - 1));
                }

            }
            /**
             * @param  {string} direction==='Northwest'
             */
            if (direction === 'Northwest') {
                /** North */
                if (roll <= 20 && roll >= 10) {
                    return new Location(this.autoGeneratedIds, `test_${this.autoGeneratedIds}`, 'auto_generated_node', null, null, null, recurse(len - 1));
                }
                /** West */
                if (roll <= 9) {
                    return new Location(this.autoGeneratedIds, `test_${this.autoGeneratedIds}`, 'auto_generated_node', null, null, null, null, null, null, recurse(len - 1));
                }

            }
            /**
             * @param  {string} direction==='Southwest'
             */
            if (direction === 'Southwest') {
                /** South */
                if (roll <= 20 && roll >= 10) {
                    return new Location(this.autoGeneratedIds, `test_${this.autoGeneratedIds}`, 'auto_generated_node', null, null, null, null, null, recurse(len - 1));
                }
                /** West */
                if (roll <= 9) {
                    return new Location(this.autoGeneratedIds, `test_${this.autoGeneratedIds}`, 'auto_generated_node', null, null, null, null, null, null, recurse(len - 1));
                }

            }
            /**
             * @param  {string} direction==='Southeast'
             */
            if (direction === 'Southeast') {
                /** East */
                if (roll <= 20 && roll >= 10) {
                    return new Location(this.autoGeneratedIds, `test_${this.autoGeneratedIds}`, 'auto_generated_node', null, null, null, null, recurse(len - 1));
                }
                /** South */
                if (roll <= 9) {
                    return new Location(this.autoGeneratedIds, `test_${this.autoGeneratedIds}`, 'auto_generated_node', null, null, null, null, null, recurse(len - 1));
                }
            }

        }
    },

    locationNodes: [],
    autoGeneratedIds: 0,
    /**
     * Gather references to randomly generated nodes for later population by static factory method
     */
    getAllLocations() {
        let direction = "LocationToNorth";
        let directions = ["LocationToNorth", "LocationToEast", "LocationToSouth", "LocationToWest"];
        let firstNode = false;
        let recurse;
        /**
         * mapPath is simply a Location entity that acts as a linked list of other Location Entity objects
         * @param  {Location} mapPath
         */
        return recurse = (mapPath) => {
            if (!firstNode) {
                firstNode = true;
                this.locationNodes.push(mapPath);
            }
            /**Check if its North */
            if (!mapPath[direction]) {
                direction = directions[0];
            }
            /**Check if its East */
            if (!mapPath[direction]) {
                direction = directions[1];
            }
            /**Check if its South */
            if (!mapPath[direction]) {
                direction = directions[2];
            }
            /**Check if its West */
            if (!mapPath[direction]) {
                direction = directions[3];
            }
            /** Base case to end recursive loop */
            if (!mapPath[direction]) {
                return;
            }
            /** Get a reference to created nodes */
            this.locationNodes.push(mapPath[direction]);

            /** recurse to find all nodes */
            return recurse(mapPath[direction]);

        }
    },

    /**
     * Get your nodes that were collected from getAllLocations method
     */
    getLocationNodes() {
        this.locationNodes.forEach((node) => {
            node.id = this.autoGeneratedIds;
            node.name = `test_${this.autoGeneratedIds}`
            // give ids to auto generated map nodes;
            this.autoGeneratedIds++;

        })
        return this.locationNodes;
    }

}

/**
 * Roll the dice!
 * 
 * @param {number} min 
 * @param {number} max 
 */
function calculateRandomNumber(min, max) {
    return Math.floor(Math.random() * (max - min)) + min;
}



